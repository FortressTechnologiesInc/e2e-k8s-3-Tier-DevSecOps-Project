pipeline {
    agent any
    
    tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }

    environment {
        SCANNER_HOME = tool 'scanner'
    }

    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                git credentialsId: 'master', url: 'https://github.com/FortressTechnologiesInc/e2e-k8s-3-Tier-DevSecOps-Project.git'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('Application-Code/frontend') {
                    withSonarQubeEnv('sonar') {
                        sh "$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=3tier-frontend -Dsonar.projectKey=3tier-frontend"
                    }
                }
            }
        }

        stage('OWASP Dependency-Check Scan') {
            steps {
                dir('Application-Code/frontend') {
                    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }

        stage('Trivy File Scan') {
            steps {
                dir('Application-Code/frontend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }

        stage('Docker Image Build') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        dir('Application-Code/frontend') {
                            sh 'docker system prune -f'
                            sh 'docker container prune -f'
                            sh 'docker build -t limkel/3tier-frontend:1.0 .'
                        }
                    }
                }
            }
        }

        stage('Docker Push Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh "docker push limkel/3tier-frontend:1.0"
                        sh "docker rmi -f limkel/3tier-frontend:1.0"
                    }
                }
            }
        }

        stage('TRIVY Image Scan') {
            steps {
                sh 'trivy image limkel/3tier-frontend:1.0 > trivyimage.txt'
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'minikube', contextName: '', credentialsId: 'spjt', namespace: '3tier', restrictKubeConfigAccess: false, serverUrl: 'https://192.168.49.2:8443') {
                    sh "kubectl apply -f /root/appnode/workspace/3tier/Kubernetes-Manifests-file/frontend.yml -n 3tier"
                    sh "kubectl apply -f /root/appnode/workspace/3tier/Kubernetes-Manifests-file/mysvc.yml -n 3tier"
                    sh "kubectl apply -f /root/appnode/workspace/3tier/Kubernetes-Manifests-file/ingress.yaml -n 3tier"
                    sh "kubectl apply -f /root/appnode/workspace/3tier/Kubernetes-Manifests-file/db.yml -n 3tier"
                    sh "kubectl get pods -n 3tier"
                    sh "kubectl get svc -n 3tier"
                }
            }
        }

        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
    }
}
